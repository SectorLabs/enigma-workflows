on:
  workflow_call:
    inputs:
      dockerfile:
        description: 'Path to the dockerfile'
        required: false
        type: string
    secrets:
      ECR_URL:
        description: 'ECR URL to push the docker image to'
        required: false
      AWS_ROLE_ARN:
        description: 'ARN of the AWS Role to assume when pushing to ECR'
        required: false
      AWS_REGION:
        description: 'The default AWS Region'
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Image
    runs-on: self-hosted
    steps:
    - name: Install Packages
      run: | 
        sudo apt update -y && \
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
        unzip awscliv2.zip && \
        sudo ./aws/install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-duration-seconds: 1800
    
    - name: Generate Short SHA
      id: sha7
      shell: bash
      run: echo ::set-output name=SHA7::$(echo $GITHUB_SHA | cut -c1-7)

    - name: Set up Docker Context for Buildx
      id: buildx-context
      run: |
        docker context create builders
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        endpoint: builders

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.ecr_url }}
        flavor: |
          latest=false
        tags: |
          type=sha,prefix=,format=short
          type=ref,event=tag
        
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v3
      with:
        file: ${{ inputs.dockerfile }}
        pull: true
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
